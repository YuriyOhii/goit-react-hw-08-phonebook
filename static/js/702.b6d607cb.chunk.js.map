{"version":3,"file":"static/js/702.b6d607cb.chunk.js","mappings":"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","sources":["components/ContactForm/Contactform.styled.jsx","redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, ErrorMessage, Field } from 'formik';\n\nexport const NewContact = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing(1)};\n\n  width: 320px;\n  padding: ${({ theme }) => theme.spacing(3)};\n\n  border: 1px solid #212121;\n  border-radius: 4px;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 16px;\n  font-weight: 500;\n\n  color: ${({ theme }) => theme.colors.grey};\n`;\n\nexport const ErrCaption = styled(ErrorMessage)`\n  font-size: 12px;\n  font-weight: 400;\n\n  color: ${({ theme }) => theme.colors.red};\n`;\n","export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from 'redux/filter/selectors';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedValue = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedValue)\n    );\n  }\n);\n","import * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport { NewContact, Input, ErrCaption } from './Contactform.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport { Button } from 'components/Button/Button';\n\nconst uniqueId = {\n  name: nanoid(),\n  number: nanoid(),\n};\n\nconst initialValue = {\n  name: '',\n  number: '',\n};\n\nconst phoneRegExp = '^[+]?[0-9\\\\.\\\\-\\\\s]{7,10}$';\n\nconst schema = Yup.object({\n  name: Yup.string().required(),\n  number: Yup.string()\n    .matches(phoneRegExp, 'Phone number is not valid')\n    .required(),\n});\n\nexport const ContactForm = ({ handleSubmit }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const checkContactName = values => {\n    const normalizedName = values.name.toLowerCase();\n    return contacts.find(({ name }) => name.toLowerCase() === normalizedName);\n  };\n\n  const onSubmit = (values, { resetForm }) => {\n    if (checkContactName(values))\n      return alert(`${values.name} already is in the PhoneBook`);\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValue}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      <NewContact>\n        <label htmlFor={uniqueId.name}>Name</label>\n        <Input\n          type=\"text\"\n          id={uniqueId.name}\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <ErrCaption name=\"name\" component={'div'} />\n        <label htmlFor={uniqueId.number}>Number</label>\n        <Input\n          type=\"tel\"\n          id={uniqueId.number}\n          name=\"number\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        />\n        <ErrCaption name=\"number\" component={'div'} />\n        <Button type=\"submit\">Add new contact</Button>\n      </NewContact>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nexport const TelNumber = styled.span`\n  background-color: ${({ theme }) => theme.colors.yellow};\n  border-radius: 4px;\n`;\n\nexport const DelButton = styled.button`\n  margin-left: ${({ theme }) => theme.spacing(2)};\n  padding: ${({ theme }) => theme.spacing()} ${({ theme }) => theme.spacing(2)};\n\n  border-radius: 4px;\n\n  font-size: 12px;\n  font-weight: 500;\n  line-height: 1.5;\n  letter-spacing: 0.02em;\n\n  background-color: ${({ theme }) => theme.colors.red};\n  color: ${({ theme }) => theme.colors.white};\n\n  opacity: 1;\n  transition: opacity 250ms linear;\n\n  cursor: pointer;\n  :hover,\n  :focus {\n    opacity: 0.5;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { TelNumber, DelButton } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nexport const ContactItem = ({ userData: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  return (\n    <p>\n      {name} : <TelNumber>{number}</TelNumber>\n      <DelButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </DelButton>\n    </p>\n  );\n};\n\nContactItem.propTypes = {\n  userData: PropTypes.exact({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }),\n};\n","import { ContactItem } from 'components/ContactItem';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const getFilteredContacts = useSelector(selectFilteredContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul>\n      {getFilteredContacts.map(el => (\n        <li key={el.id}>\n          <ContactItem userData={el} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import styled from 'styled-components';\nexport const Search = styled.input`\n  border: 2px solid ${({ theme }) => theme.colors.grey};\n  border-radius: 4px;\n\n  font-size: 20px;\n  font-weight: 500;\n  line-height: 1.5;\n\n  color: ${({ theme }) => theme.colors.red};\n`;\n","import { Search } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { setFilter } from 'redux/filter/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <Search\n        type=\"text\"\n        name=\"filtr\"\n        onChange={e => dispatch(setFilter(e.target.value))}\n        value={filter}\n      />\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\n\nexport default function ContactsPage() {\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["NewContact","styled","Form","_templateObject","_taggedTemplateLiteral","_ref","theme","spacing","_ref2","Input","Field","_templateObject2","_ref3","colors","grey","ErrCaption","ErrorMessage","_templateObject3","_ref4","red","selectFilter","state","filter","selectContacts","contacts","items","selectFilteredContacts","createSelector","normalizedValue","toLowerCase","name","includes","uniqueId","nanoid","number","initialValue","schema","Yup","required","matches","ContactForm","handleSubmit","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","onSubmit","values","resetForm","normalizedName","find","checkContactName","alert","concat","addContact","validationSchema","children","_jsxs","htmlFor","type","id","title","component","Button","TelNumber","yellow","DelButton","_ref5","_ref6","white","ContactItem","_ref$userData","userData","onClick","deleteContact","ContactList","getFilteredContacts","useEffect","fetchContacts","map","el","Search","Filter","_Fragment","onChange","e","setFilter","target","value","ContactsPage"],"sourceRoot":""}